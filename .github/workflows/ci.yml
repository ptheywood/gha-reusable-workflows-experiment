name: CI
on: 
  push:
    branches:
      - '**'
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/ci.yml"
  workflow_dispatch:

defaults:
  run:
    shell: bash

# @todo - set a group based on the pr, so that only the latest job for a pr will run to save cI workers?
# concurrency:
  # group: 
  # cancel-in-progress: true

jobs:

  # Job to select the matrix for the next step, based on the job.
  ci-matrix:
    runs-on: ubuntu-latest
    outputs:
      MATRIX_OS: ${{ steps.output-matrix.outputs.MATRIX_OS }}
      MATRIX_CXX: ${{ steps.output-matrix.outputs.MATRIX_CXX }}
    steps:
      - uses: actions/checkout@v3
      - name: Set job matrix
        id: output-matrix
        run: | 
          MATRIX_OS="[ubuntu-latest]"
          echo "MATRIX_OS=${MATRIX_OS}" | tee -a "$GITHUB_OUTPUT"
          MATRIX_CXX="[gcc-9]"
          echo "MATRIX_CXX=${MATRIX_CXX}" | tee -a "$GITHUB_OUTPUT"

  everything:
    name: "everything ${{ matrix.os }} ${{ matrix.cxx }}"
    needs: [ci-matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.ci-matrix.outputs.MATRIX_OS) }}
        cxx: ${{ fromJSON(needs.ci-matrix.outputs.MATRIX_CXX) }}
    env:
      BUILD_DIR: "build"
    steps:
      - uses: actions/checkout@v3

      - name: "Install Dependencies"
        run: |
          echo "apt-get install ..."
          echo "./install-cuda.sh"
          echo "apt install python-x"

      - name: "Configure CMake"
        id: configure
        run: >
          cmake . -B "${{ env.BUILD_DIR }}"
          -DCMAKE_BUILD_TYPE="Release"
          -Werror=dev

      - name: Lint
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake --build . --target lint --verbose -j `nproc`

      - name: Docs
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake --build . --target docs --verbose -j `nproc`

      - name: Build library
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake --build . --target grwe --verbose -j `nproc`

      - name: Build example
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake --build . --target example --verbose -j `nproc`

      - name: Build tests
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake --build . --target tests --verbose -j `nproc`

      - name: Run example
        working-directory: ${{ env.BUILD_DIR }}
        run: ./example/example

      - name: Run tests
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest

      # Pretend to save artifacts
      - name: Save artifacts
        working-directory: ${{ env.BUILD_DIR }}
        run: echo "Pretending to save arttifacts"
  
  # # Job to create the draft release, if requested. This is fake.
  # draft-release:
  #   needs: [everything]
  #   runs-on: ubuntu-latest
  #    steps:
  #     - uses: actions/checkout@v3
  #     - name: createa draft
  #       run: echo "pretending to create a draft release"